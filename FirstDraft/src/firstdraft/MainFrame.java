/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package firstdraft;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.ListModel;
import javax.swing.SwingConstants;
import static javax.swing.SwingUtilities.paintComponent;

/**
 *
 * @author aelek
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addHostButton = new javax.swing.JButton();
        drawPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        switchList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        hubList = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        hostList = new javax.swing.JList<>();
        addSwitchButton = new javax.swing.JButton();
        addHubButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        editNameField = new javax.swing.JTextField();
        editTypeSelector = new javax.swing.JComboBox<>();
        deleteButton = new javax.swing.JButton();
        connectButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        addHostButton.setText("Add Host");
        addHostButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHostButtonActionPerformed(evt);
            }
        });

        drawPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        switchList.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        switchList.setModel(switchListUpdate);
        jScrollPane1.setViewportView(switchList);

        hubList.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        hubList.setModel(hubListUpdate);
        jScrollPane2.setViewportView(hubList);

        hostList.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        hostList.setModel(hostListUpdate);
        jScrollPane3.setViewportView(hostList);

        javax.swing.GroupLayout drawPanelLayout = new javax.swing.GroupLayout(drawPanel);
        drawPanel.setLayout(drawPanelLayout);
        drawPanelLayout.setHorizontalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, drawPanelLayout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 120, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(119, 119, 119)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );
        drawPanelLayout.setVerticalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(drawPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE))
                .addContainerGap())
        );

        addSwitchButton.setText("Add Switch");
        addSwitchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSwitchButtonActionPerformed(evt);
            }
        });

        addHubButton.setText("Add Hub");
        addHubButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHubButtonActionPerformed(evt);
            }
        });

        editButton.setText("Edit");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });

        editTypeSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Host", "Switch", "Hub" }));

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        connectButton.setText("Connect Objects");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(addHostButton)
                .addGap(216, 216, 216)
                .addComponent(addSwitchButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addHubButton)
                .addGap(107, 107, 107))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(connectButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(editTypeSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(editNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(editButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteButton)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(drawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addHostButton)
                    .addComponent(addSwitchButton)
                    .addComponent(addHubButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drawPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editButton)
                    .addComponent(editNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editTypeSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteButton)
                    .addComponent(connectButton))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    HashMap<String, Host> hostMap = new HashMap<>();
    HashMap<String, Switch> switchMap = new HashMap<>();
    HashMap<String, Hub> hubMap = new HashMap<>();
    HashMap<String, JButton> buttonTrackMap = new HashMap<>();
    
    DefaultListModel hostListUpdate = new DefaultListModel<>();
    DefaultListModel switchListUpdate = new DefaultListModel<>();
    DefaultListModel hubListUpdate = new DefaultListModel<>();
    
    
    //ArrayList<String> hostArray = new ArrayList<String>();
   // ArrayList<String> switchArray = new ArrayList<String>();
   // ArrayList<String> hubArray = new ArrayList<String>();
    
    
    
    
    public void CreateHost(String name) {
        Host obj = new Host(name);
        hostMap.put(name, obj);
    }
    
    public void CreateSwitch(String name) {
        Switch obj = new Switch(name);
        switchMap.put(name, obj);
        
    }
    
    public void CreateHub(String name) {
        Hub obj = new Hub(name);
        hubMap.put(name, obj);
        
    }
    
    private void addHostButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHostButtonActionPerformed
        // TODO add your handling code here:
        JFrame frame = new JFrame("Create a new host");
        String hname = JOptionPane.showInputDialog(frame, "Enter a host name:");
        if (hname != null){
            if (hostMap.get(hname) != null || switchMap.get(hname) != null || hubMap.get(hname) != null) {
                JFrame switchDup = new JFrame("Error:Duplicate Name");
                JOptionPane.showMessageDialog(switchDup, "Name already in use");
            } else {
                CreateHost(hname);
                hostListUpdate.addElement(hname);
            }
        }
                          
    }//GEN-LAST:event_addHostButtonActionPerformed

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        // TODO add your handling code here:
        if (editNameField.getText() != null && String.valueOf(editTypeSelector.getSelectedItem()) == "Host" && hostMap.containsKey(editNameField.getText()) == true) {
            
            EditHostWindow hostedit = new EditHostWindow();
            hostedit.setVisible(true);
            hostedit.getProperties(hostMap.get(editNameField.getText()));
        
        }
        else if (editNameField.getText() != null && String.valueOf(editTypeSelector.getSelectedItem()) == "Switch" && switchMap.containsKey(editNameField.getText()) == true) {
            EditSwitchWindow switchedit = new EditSwitchWindow();
            switchedit.setVisible(true);
            switchedit.getProperties(switchMap.get(editNameField.getText()));
        }
        else if (editNameField.getText() != null && String.valueOf(editTypeSelector.getSelectedItem()) == "Hub" && hubMap.containsKey(editNameField.getText()) == true) {
            EditHubWindow switchedit = new EditHubWindow();
            switchedit.setVisible(true);
            switchedit.getProperties(hubMap.get(editNameField.getText()));
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void addSwitchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSwitchButtonActionPerformed
        // TODO add your handling code here:
        JFrame frame = new JFrame("Create a new switch");
        String hname = JOptionPane.showInputDialog(frame, "Enter a switch name:");
        if (hname != null){
            if (hostMap.get(hname) != null || switchMap.get(hname) != null || hubMap.get(hname) != null) {
                JFrame switchDup = new JFrame("Error:Duplicate Name");
                JOptionPane.showMessageDialog(switchDup, "Name already in use");
            } else {
                CreateSwitch(hname);
                switchListUpdate.addElement(hname);
            }
        }
    }//GEN-LAST:event_addSwitchButtonActionPerformed

    private void addHubButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHubButtonActionPerformed
        // TODO add your handling code here:
        JFrame frame = new JFrame("Create a new hub");
        String hname = JOptionPane.showInputDialog(frame, "Enter a hub name:");
        if (hname != null) {
            if (hostMap.get(hname) != null || switchMap.get(hname) != null || hubMap.get(hname) != null) {
                JFrame switchDup = new JFrame("Error:Duplicate Name");
                JOptionPane.showMessageDialog(switchDup, "Name already in use");
            } else {
                CreateHub(hname);
                hubListUpdate.addElement(hname);
            }
        }
    }//GEN-LAST:event_addHubButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
         if (editNameField.getText() != null && String.valueOf(editTypeSelector.getSelectedItem()) == "Host" && hostMap.containsKey(editNameField.getText()) == true) {
           JFrame frame = new JFrame("Create a new hub");          
           if (JOptionPane.showConfirmDialog(frame, "Are you sure?", "Confirm Delete", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                hostListUpdate.removeElement(editNameField.getText());
                hostMap.remove(editNameField.getText());
                editNameField.setText(null);
                drawPanel.revalidate();
                drawPanel.repaint();
           }
        
        }
        else if (editNameField.getText() != null && String.valueOf(editTypeSelector.getSelectedItem()) == "Switch" && switchMap.containsKey(editNameField.getText()) == true) {
           JFrame frame = new JFrame("Create a new hub");          
           if (JOptionPane.showConfirmDialog(frame, "Are you sure?", "Confirm Delete", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            switchListUpdate.removeElement(editNameField.getText());
            switchMap.remove(editNameField.getText());
            editNameField.setText(null);
            drawPanel.revalidate();
            drawPanel.repaint();
        }
        }   
        else if (editNameField.getText() != null && String.valueOf(editTypeSelector.getSelectedItem()) == "Hub" && hubMap.containsKey(editNameField.getText()) == true) {
           JFrame frame = new JFrame("Create a new hub");
           if (JOptionPane.showConfirmDialog(frame, "Are you sure?", "Confirm Delete", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            hubListUpdate.removeElement(editNameField.getText());
            hubMap.remove(editNameField.getText());
            editNameField.setText(null);
            drawPanel.revalidate();
            drawPanel.repaint();
        }
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // TODO add your handling code here:
        JFrame frame = new JFrame("Select objects to connect");
        JTextField obj1 = new JTextField();
        JTextField obj2 = new JTextField();
        
        Object[] objFields = {"Object 1", obj1, "Object 2", obj2};
        JOptionPane.showConfirmDialog(null, objFields, "Enter Object Names", JOptionPane.OK_CANCEL_OPTION);
        if (obj1.getText() != null && obj2.getText() != null) {
            
            if (hostMap.containsKey(obj1.getText()) == true && switchMap.containsKey(obj2.getText()) == true) {
                
                int xCord1 = getHostCord(obj1.getText());
                int xCord2 = getSwitchCord(obj2.getText());
                Graphics g = drawPanel.getGraphics();
                Color color = Color.RED;
                Graphics2D g2 = (Graphics2D) g;
                g2.setColor(color);
                g2.setStroke(new BasicStroke(3));
                paintHostSwitch(g2, xCord1, xCord2);
            }
            
            if (switchMap.containsKey(obj1.getText()) == true && hostMap.containsKey(obj2.getText()) == true) {
                
                int xCord1 = getSwitchCord(obj1.getText());
                int xCord2 = getHostCord(obj2.getText());
                Graphics g = drawPanel.getGraphics();
                Color color = Color.RED;
                Graphics2D g2 = (Graphics2D) g;
                g2.setColor(color);
                g2.setStroke(new BasicStroke(3));
                paintHostSwitch(g2, xCord2, xCord1);
            }
            
            if (hostMap.containsKey(obj1.getText()) == true && hubMap.containsKey(obj2.getText()) == true) {
                 
                int xCord1 = getHostCord(obj1.getText());
                int xCord2 = getHubCord(obj2.getText());
                Graphics g = drawPanel.getGraphics();
                Color color = Color.BLUE;
                Graphics2D g2 = (Graphics2D) g;
                g2.setColor(color);
                g2.setStroke(new BasicStroke(3));
                paintHostHub(g, xCord1, xCord2);
             }
            
            if (hubMap.containsKey(obj1.getText()) == true && hostMap.containsKey(obj2.getText()) == true) {
                 
                int xCord1 = getHubCord(obj1.getText());
                int xCord2 = getHostCord(obj2.getText());
                Graphics g = drawPanel.getGraphics();
                Color color = Color.BLUE;
                Graphics2D g2 = (Graphics2D) g;
                g2.setColor(color);
                g2.setStroke(new BasicStroke(3));
                paintHostHub(g, xCord2, xCord1);
             }
             
            if (hubMap.containsKey(obj1.getText()) == true && switchMap.containsKey(obj2.getText()) == true) {
                
                int xCord1 = getHubCord(obj1.getText());
                int xCord2 = getSwitchCord(obj2.getText());
                Graphics g = drawPanel.getGraphics();
                Color color = Color.GREEN;
                Graphics2D g2 = (Graphics2D) g;
                g2.setColor(color);
                g2.setStroke(new BasicStroke(3));
                paintHubSwitch(g2, xCord1, xCord2);
            }
             
            if (switchMap.containsKey(obj1.getText()) == true && hubMap.containsKey(obj2.getText()) == true) {
                
                int xCord1 = getSwitchCord(obj1.getText());
                int xCord2 = getHubCord(obj2.getText());
                Graphics g = drawPanel.getGraphics();
                Color color = Color.GREEN;
                Graphics2D g2 = (Graphics2D) g;
                g2.setColor(color);
                g2.setStroke(new BasicStroke(3));
                paintHubSwitch(g2, xCord2, xCord1);
            }
        }
   
    }//GEN-LAST:event_connectButtonActionPerformed

    public int getHostCord(String hname) {
        int hostY = hostListUpdate.indexOf(hname) * 34 + 30;
        return hostY;
    }
    
    public int getSwitchCord(String hname) {
        int switchY = switchListUpdate.indexOf(hname) * 34 + 30;
        return switchY;
    }
    
    public int getHubCord(String hname) {
        int hubY = hubListUpdate.indexOf(hname) * 34 + 30;
        return hubY;
    }
    
    public void paintHostSwitch(Graphics g, int hostY, int switchY) {
        drawPanel.paintComponents(g);
        g.drawLine(240, hostY, 355, switchY);
    }
    
     public void paintHubSwitch(Graphics g, int hubY, int switchY) {
        drawPanel.paintComponents(g);
        g.drawLine(645, hubY, 530, switchY);
    }
    
    public void paintHostHub(Graphics g, int hostY, int hubY) {
        drawPanel.paintComponents(g);
        g.drawLine(58, hostY, 0, hubY);
        g.drawLine(900, hostY, 825, hubY);
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addHostButton;
    private javax.swing.JButton addHubButton;
    private javax.swing.JButton addSwitchButton;
    private javax.swing.JButton connectButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JPanel drawPanel;
    private javax.swing.JButton editButton;
    private javax.swing.JTextField editNameField;
    private javax.swing.JComboBox<String> editTypeSelector;
    private javax.swing.JList<String> hostList;
    private javax.swing.JList<String> hubList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> switchList;
    // End of variables declaration//GEN-END:variables
}
